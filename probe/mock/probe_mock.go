// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AirHelp/autoscaler/probe (interfaces: Probe)

// Package probeMock is a generated GoMock package.
package probeMock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProbe is a mock of Probe interface.
type MockProbe struct {
	ctrl     *gomock.Controller
	recorder *MockProbeMockRecorder
}

// MockProbeMockRecorder is the mock recorder for MockProbe.
type MockProbeMockRecorder struct {
	mock *MockProbe
}

// NewMockProbe creates a new mock instance.
func NewMockProbe(ctrl *gomock.Controller) *MockProbe {
	mock := &MockProbe{ctrl: ctrl}
	mock.recorder = &MockProbeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProbe) EXPECT() *MockProbeMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockProbe) Check(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockProbeMockRecorder) Check(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockProbe)(nil).Check), arg0)
}

// Kind mocks base method.
func (m *MockProbe) Kind() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kind")
	ret0, _ := ret[0].(string)
	return ret0
}

// Kind indicates an expected call of Kind.
func (mr *MockProbeMockRecorder) Kind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kind", reflect.TypeOf((*MockProbe)(nil).Kind))
}
